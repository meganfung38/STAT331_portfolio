---
title: "STAT 331 Portfolio"
author: "Megan Fung"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# LAB 2: Q1
# imports local file using read_csv() and here()
surveys <-read_csv(here("week-2", "surveys.csv"), show_col_types = FALSE)

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

# PA-3: Data Download & Package Loading
# imports online source using read_csv() 
colleges <- read_csv("https://www.dropbox.com/s/bt5hvctdevhbq6j/colleges.csv?dl=1")

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# PA-4: Data Import
# imports xlsx using read_xlsx()
military <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending",
                      skip  = 7,
                      n_max = 191,
                      na = c(". .", "xxx", "..")
                      )
  
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# PA-3: Data Cleaning
# selects all relevant columns for analysis
colleges_clean1 <- colleges |>
  select(INSTNM,
         CITY,
         STABBR,
         ZIP,
         ADM_RATE,
         SAT_AVG,
         UGDS,
         TUITIONFEE_IN,
         TUITIONFEE_OUT,
         CONTROL,
         REGION)

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

# CHALLENGE 4: O3 [REVISED]
# removes using negation operator 
plot_summary_stats_2018 <- summary_stats_2018 |>
  select(-price_gap, -percentage_gap,
         -annual_income_percentage_spent_center,
         -annual_income_percentage_spent_family) |>
  pivot_longer(
    cols = c(median_center_based, median_family_based),
    names_to = "setting_type",
    values_to = "median_weekly_cost"
  ) |>
  mutate(
    setting_type = recode(
      setting_type, 
      median_center_based = "Center Based",
      median_family_based = "Family Based"
    )
  )

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

# LAB 4: Q7 [REVISED]
# selects all cost related columns with the 'mc' prefix
weekly_median_price <- ca_childcare |>
  select(region, study_year, starts_with("mc_")) |>
  pivot_longer(
    cols = c(starts_with("mc_")),
    names_to = "age_group", 
    values_to = "median_weekly_price"
  ) |>
  mutate(age_group = recode(
      age_group,
      mc_infant = "Infant", 
      mc_toddler = "Toddler", 
      mc_preschool = "Preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"))

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# LAB 5: Annabel Interview
# filters for rows that containing the specified person_id
interview |>
  filter(
    person_id == 16371
  )

```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

# LAB 4: Q5
# filters for years between 2008-2018
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year, 
    values_from = median_income,
    names_prefix = "Income_"
  ) |>
  arrange(desc(Income_2018)) |>
  rename(
    Region = region,
    "2008 Median Income ($)" = Income_2008,
    "2018 Median Income ($)" = Income_2018
  )

```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# LAB 5: Inspect Witness 1
# filters for rows containing the specified street name
person |>
  filter(address_street_name == "Northwestern Dr") |>
  arrange(desc(address_number)) |>
  head(1)

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# LAB 5: Inspect Witness 2
# filters for rows that match the specified name
person |>
  filter(
    str_detect(
      name,
      "Annabel"
    ),
    address_street_name == "Franklin Ave"
  )

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# PA 5.2: Q4
# filters for timestamps 35 days before/ after Nov. 24
step_4 <- step_3 |>
  filter(
    Time.Spotted %within% interval(
      mdy("November 24, 2022", tz = "America/Los_Angeles") - days(35),
      mdy("November 24, 2022", tz = "America/Los_Angeles") + days(35)
    )
  )

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

# CHALLENGE 4: Q2
# create new numeric variables and percentages 
weeks_in_year <- 52

summary_stats_2018 <- ca_childcare |>
  filter(study_year == 2018) |> 
  group_by(region) |> 
  summarize(
    median_center_based = median(mc_infant, na.rm = TRUE),
    median_family_based = median(mfcc_infant, na.rm = TRUE),
    median_income = median(mhi_2018, na.rm = TRUE)
  ) |>
  mutate(
    price_gap = median_center_based - median_family_based,
    percentage_gap = (price_gap / median_family_based) * 100,
    annual_income_percentage_spent_center = ((median_center_based * weeks_in_year) / median_income) * 100,
    annual_income_percentage_spent_family = ((median_family_based * weeks_in_year) / median_income) * 100 
  ) |>
  arrange(desc(percentage_gap))

```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

# CHALLENGE 3: Q1 
# creates new numeric levels 
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(
    SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = case_when(
      seniority <= 4 ~ "junior",
      seniority >= 5 & seniority <= 8 ~ "senior",
      seniority > 8 ~ "very senior"
    )
  ) |>
  select(course_id, SET_level, sen_level)

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

# LAB 4: Q7
# renames and reorders factor levels
weekly_median_price <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group", 
    values_to = "median_weekly_price"
  ) |>
  mutate(age_group = recode(
      age_group,
      mc_infant = "Infant", 
      mc_toddler = "Toddler", 
      mc_preschool = "Preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"))

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# LAB 4: Q7
# uses fct_reorder2() to reorder legend entries using data values
ggplot(
  data = weekly_median_price,
  aes(
    x = study_year,
    y = median_weekly_price, 
    color = fct_reorder2(region, study_year, median_weekly_price), 
  )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# LAB 4: Q4
# uses fct_collapse() to group counties into regions
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(
    county_name,
    "Superior California" = superior_counties,
    "North Coast" = north_coast_counties,
    "San Francisco Bay Area" = san_fran_counties,
    "Northern San Joaquin Valley" = n_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Inland Empire" = inland_counties,
    "Los Angeles County" = la_county,
    "Orange County" = orange_county,
    "San Diego - Imperial" = san_diego_imperial_counties
  ))

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# PA 5.2: Q1
# uses force_tz() to adjust time zone data
step_1 <- suspects |>
  mutate(
    Time.Spotted = force_tz(
      Time.Spotted,
      tzone = "America/Los_Angeles"
    )
  )

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# LAB 4: Q2
# merges county and childcare datasets
ca_childcare <- childcare_costs |> 
  left_join(counties, by = "county_fips_code") |>
  filter(state_name == "California") |>
  select(county_fips_code, county_name, state_name, everything())

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right


```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

# LAB 4: Q3
# merges tax and childcare datasets 
ca_childcare <- ca_childcare |>
  left_join(
    tax_rev, 
    by = c("county_name" = "entity_name", "study_year" = "year")
  )

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

# LAB 5: Inspect Gold Members and Match License
# chains multiples to match members, people, and license
get_fit_now_member |>
  filter(
    membership_status == "gold",
    str_detect(
      id,
      "^48Z"
    )
  ) |>
  inner_join(
    person,
    by = c("person_id" = "id")
  ) |>
  inner_join(
    drivers_license,
    by = c("license_id" = "id")
  ) |>
  filter(
    str_detect(
      plate_number, 
      "H42W"
    )
  )

```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

# LAB 5: Find Hire 
# merges driver record and event check in datasets 
drivers_license |>
  # filter for hire's physical description + car type
  filter(  
    gender == "female",
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S", 
    height %in% c(65, 66, 67)
  ) |>
  # get possible hires' names
  inner_join(
    person,
    by = c("id" = "license_id")
  ) |> 
  # rename to correct column name for joining
  rename(person_id = id.y) |>
  # match concert attendee(s) with possible hires' names 
  inner_join(
    facebook_event_checkin |>
      filter(
        event_name == "SQL Symphony Concert",
        between(date, 20171201, 20171231) 
      ) |>
      group_by(person_id) |>
      summarize(visits = n()) |>
      filter(visits == 3),
    by = "person_id"
  )

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# CHALLENGE 4: Q3
# reshapes wide data to long for form
plot_summary_stats_2018 <- summary_stats_2018 |>
  select(region, median_center_based, median_family_based, median_income) |>
  pivot_longer(
    cols = c(median_center_based, median_family_based),
    names_to = "setting_type",
    values_to = "median_weekly_cost"
  ) |>
  mutate(
    setting_type = recode(
      setting_type, 
      median_center_based = "Center Based",
      median_family_based = "Family Based"
    )
  )

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# LAB 4: Q5
# widens grouped data to compare 2008 vs 2018 
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year, 
    values_from = median_income,
    names_prefix = "Income_"
  ) |>
  arrange(desc(Income_2018)) |>
  rename(
    Region = region,
    "2008 Median Income ($)" = Income_2008,
    "2018 Median Income ($)" = Income_2018
  )

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Lab 2
-   Challenge 2
-   Lab 3
-   Challenge 3
-   Lab 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# LAB 4: Q7
# GROWING COMMENT: reorder colors in legend to appear in same order as lines in plot
# REVISION FOR SUCCESS: use fct_reorder2() to automatically reorder legend. Clearly labelled plot with theme adjustments and color mapping.
weekly_median_price <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group", 
    values_to = "median_weekly_price"
  ) |>
  mutate(age_group = recode(
      age_group,
      mc_infant = "Infant", 
      mc_toddler = "Toddler", 
      mc_preschool = "Preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"))

ggplot(
  data = weekly_median_price,
  aes(
    x = study_year,
    y = median_weekly_price, 
    color = fct_reorder2(region, study_year, median_weekly_price), 
  )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# LAB 3: Q5
# RECIEVED SUCCESS: pipeline cleans and organizes evaluation data
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(c(course_id, teacher_id), as.character)) |>
  select(
    course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex
  )
```

-   Example of function formatting

```{r}
#| label: r-2-3

# LAB 5: Find Hire
# well documented comments for each transformation/ join
drivers_license |>
  # filter for hire's physical description + car type
  filter(  
    gender == "female",
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S", 
    height %in% c(65, 66, 67)
  ) |>
  # get possible hires' names
  inner_join(
    person,
    by = c("id" = "license_id")
  ) |> 
  # rename to correct column name for joining
  rename(person_id = id.y) |>
  # match concert attendee(s) with possible hires' names 
  inner_join(
    facebook_event_checkin |>
      filter(
        event_name == "SQL Symphony Concert",
        between(date, 20171201, 20171231) 
      ) |>
      group_by(person_id) |>
      summarize(visits = n()) |>
      filter(visits == 3),
    by = "person_id"
  )

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

# LAB 4: Q4
# GROWING COMMENT: suppose to use function from forcats 
# REVISION FOR SUCCESS: uses fct_collapse() from forcats for generalized transformations
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(
    county_name,
    "Superior California" = superior_counties,
    "North Coast" = north_coast_counties,
    "San Francisco Bay Area" = san_fran_counties,
    "Northern San Joaquin Valley" = n_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Inland Empire" = inland_counties,
    "Los Angeles County" = la_county,
    "Orange County" = orange_county,
    "San Diego - Imperial" = san_diego_imperial_counties
  ))

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# LAB 2: Q4-8
# RECIEVED SUCCESS: visualizes weight vs hindfoot_length 
ggplot(data = surveys,
      aes(x = weight, y = hindfoot_length)) + 
      geom_point(alpha = 0.4) + 
      facet_wrap(~ species) + 
      labs(
        title = "Relationship between Rodent Weight and Rodent Hindfoot Length",
        subtitle = "Hindfoot Length (millimeters)",
        x = "Weight (grams)", 
        y = ""
      )

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# CHALLENGE 2
# RECIEVED SUCCESS: compares numeric weights across categorical species using a boxplot
ggplot(data = surveys, 
      aes(x = species, y = weight, fill = sex)) + 
      geom_boxplot(outlier.shape = NA) + 
      scale_fill_viridis_d(option = "C", begin = 0.2, end = 0.8) +
      labs(
        title = "Boxplots of the Distribution of Rodent Weight and Rodent Species", 
        subtitle = "Sex: <span style='color:#440154;'>Male</span> | <span style='color:#440154;'>Female</span>",
        x = "Species", 
        y = "Weight (grams)", 
        fill = NULL
      ) + 
      theme_minimal(base_size = 12) + 
      theme(
        legend.position = "none",
        plot.subtitle = element_markdown(size = 11),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.minor = element_blank(),
        plot.title = element_text(face = "bold", size = 14)
      )

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

# PA 2: Q6
# grouped patterns using facets
ggplot(
  data = penguins, 
  mapping = aes(
    x = bill_length_mm, 
    y = bill_depth_mm, 
    color = species
    )) + 
  geom_point() + 
  geom_smooth() + 
  facet_wrap(vars(island))

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

# LAB 4: Q7
# GROWING COMMENT: reorder colors in legend to appear in same order as lines in plot
# REVISION FOR SUCCESS: use fct_reorder2() to automatically reorder legend. Clearly labelled plot with theme adjustments and color mapping. Also applied theme adjustments to improve readability. 
ggplot(
  data = weekly_median_price,
  aes(
    x = study_year,
    y = median_weekly_price, 
    color = fct_reorder2(region, study_year, median_weekly_price), 
  )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

# LAB 4: Q7
# color customizations using colorRampPalette
ggplot(
  data = weekly_median_price,
  aes(
    x = study_year,
    y = median_weekly_price, 
    color = fct_reorder2(region, study_year, median_weekly_price), 
  )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# LAB 2: Q10-15 [REVISED]
# RECIEVED SUCCESS: descriptive titles/ subtitles for context
ggplot(data = surveys, 
      aes(x = species, y = weight)) + 
      geom_boxplot(outlier.shape = NA) + 
      geom_jitter(color = "steelblue", alpha = 0.4) + 
      labs(
        title = "Boxplots of the Distribution of Rodent Weight By Species in the Portal Project",
        subtitle = "Data from ecological study near Portal, AZ",
        x = "Species", 
        y = "Weight (grams)"
      ) + 
      theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# LAB 2: Q10-15 [REVISED]
# RECIEVED SUCCESS: rotates species label -> modifies x axis to prevent label overlap (easier to read)
ggplot(data = surveys, 
      aes(x = species, y = weight)) + 
      geom_boxplot(outlier.shape = NA) + 
      geom_jitter(color = "steelblue", alpha = 0.4) + 
      labs(
        title = "Boxplots of the Distribution of Rodent Weight By Species in the Portal Project",
        subtitle = "Data from ecological study near Portal, AZ",
        x = "Species", 
        y = "Weight (grams)"
      ) + 
      theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

# LAB 4: Q7
# GROWING COMMENT: reorder colors in legend to appear in same order as lines in plot
# REVISION FOR SUCCESS: use fct_reorder2() to automatically reorder legend. 
ggplot(
  data = weekly_median_price,
  aes(
    x = study_year,
    y = median_weekly_price, 
    color = fct_reorder2(region, study_year, median_weekly_price), 
  )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

# CHALLENGE 2
# RECIEVED SUCCESS: virdis palette for non-standard coloring 
ggplot(data = surveys, 
      aes(x = species, y = weight, fill = sex)) + 
      geom_boxplot(outlier.shape = NA) + 
      scale_fill_viridis_d(option = "C", begin = 0.2, end = 0.8) +
      labs(
        title = "Boxplots of the Distribution of Rodent Weight and Rodent Species", 
        subtitle = "Sex: <span style='color:#440154;'>Male</span> | <span style='color:#440154;'>Female</span>",
        x = "Species", 
        y = "Weight (grams)", 
        fill = NULL
      ) + 
      theme_minimal(base_size = 12) + 
      theme(
        legend.position = "none",
        plot.subtitle = element_markdown(size = 11),
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.minor = element_blank(),
        plot.title = element_text(face = "bold", size = 14)
      )

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

# LAB 4: Q7
# custom colorRampPalette colors
ggplot(
  data = weekly_median_price,
  aes(
    x = study_year,
    y = median_weekly_price, 
    color = fct_reorder2(region, study_year, median_weekly_price), 
  )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# LAB 4: Q6
# RECIEVED SUCCESS: calculates group medians using summarize()
median_infant_cb <- ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_infant_price = median(mc_infant, na.rm = TRUE)) |>
  arrange(median_infant_price)

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# LAB 3: Q5
# RECIEVED SUCCESS: uses across() to apply transformations over multiple variables
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(c(course_id, teacher_id), as.character)) |>
  select(
    course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex
  )

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# LAB 4: Q5
# summarizes median income across regions and years 
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year, 
    values_from = median_income,
    names_prefix = "Income_"
  ) |>
  arrange(desc(Income_2018)) |>
  rename(
    Region = region,
    "2008 Median Income ($)" = Income_2008,
    "2018 Median Income ($)" = Income_2018
  )

```

-   Example 2

```{r}
#| label: dvs-5-2

# CHALLENGE 4: Q2
# summarizes childcare stats across regions 
weeks_in_year <- 52

summary_stats_2018 <- ca_childcare |>
  filter(study_year == 2018) |> 
  group_by(region) |> 
  summarize(
    median_center_based = median(mc_infant, na.rm = TRUE),
    median_family_based = median(mfcc_infant, na.rm = TRUE),
    median_income = median(mhi_2018, na.rm = TRUE)
  ) |>
  mutate(
    price_gap = median_center_based - median_family_based,
    percentage_gap = (price_gap / median_family_based) * 100,
    annual_income_percentage_spent_center = ((median_center_based * weeks_in_year) / median_income) * 100,
    annual_income_percentage_spent_family = ((median_family_based * weeks_in_year) / median_income) * 100 
  ) |>
  arrange(desc(percentage_gap))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

# LAB 4: Q5
# renamed columns to clarify table context
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year, 
    values_from = median_income,
    names_prefix = "Income_"
  ) |>
  arrange(desc(Income_2018)) |>
  rename(
    Region = region,
    "2008 Median Income ($)" = Income_2008,
    "2018 Median Income ($)" = Income_2018
  )

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

# CHALLENGE 4: Q3
# uses non default colors
ggplot(
  data = plot_summary_stats_2018, 
  aes(
    x = reorder(region, median_income),
    y = median_weekly_cost, 
    fill = setting_type
  )
) + 
  geom_col(position = "dodge") +
  coord_flip() + 
  scale_fill_manual(values = c(
    "Center Based" = "#2b8cbe",
    "Family Based" = "#41ae76"
  )) + 
  labs(
    title = "2018 Median Weekly Childcare Costs for Infants by Region and Setting",
    x = "California Region (ordered by median household income)", 
    y = "Median Weekly Cost", 
    fill = "Setting Type"
  )

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

# LAB 4: Q5
# uses pivot_wider() to reshape data (improves readability for regional comparison)
median_income_region <- ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(region, study_year) |>
  summarize(median_income = median(mhi_2018, na.rm = TRUE)) |>
  ungroup() |>
  pivot_wider(
    names_from = study_year, 
    values_from = median_income,
    names_prefix = "Income_"
  ) |>
  arrange(desc(Income_2018)) |>
  rename(
    Region = region,
    "2008 Median Income ($)" = Income_2008,
    "2018 Median Income ($)" = Income_2018
  )

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# LAB 4: Q7
# selects multiple columms in one select()
weekly_median_price <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group", 
    values_to = "median_weekly_price"
  ) |>
  mutate(age_group = recode(
      age_group,
      mc_infant = "Infant", 
      mc_toddler = "Toddler", 
      mc_preschool = "Preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool"))

```

-   using `across()`

```{r}
#| label: pe-1-across

# LAB 3: Q5
# uses across() to simplify reptitive code  
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants >= 10) |>
  mutate(across(c(course_id, teacher_id), as.character)) |>
  select(
    course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, sex
  )

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# LAB 5: Inspect Gold Members and Match License
# uses current tidyverse syntax 
get_fit_now_member |>
  filter(
    membership_status == "gold",
    str_detect(
      id,
      "^48Z"
    )
  ) |>
  inner_join(
    person,
    by = c("person_id" = "id")
  ) |>
  inner_join(
    drivers_license,
    by = c("license_id" = "id")
  ) |>
  filter(
    str_detect(
      plate_number, 
      "H42W"
    )
  )

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# LAB 4: Q7 [REVISED]
# revised to create a wrangling pipeline
# performs transformations and pipes directly into ggplot()
#| fig-width: 13
#| fig-height: 5
ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = c(mc_infant, mc_toddler, mc_preschool),
    names_to = "age_group", 
    values_to = "median_weekly_price"
  ) |>
  mutate(age_group = recode(
      age_group,
      mc_infant = "Infant", 
      mc_toddler = "Toddler", 
      mc_preschool = "Preschool"),
    age_group = fct_relevel(age_group, "Infant", "Toddler", "Preschool")) |>
  ggplot(
    aes(
      x = study_year,
      y = median_weekly_price, 
      color = fct_reorder2(region, study_year, median_weekly_price), 
    )) + 
  geom_point(alpha = 0.5) + 
  geom_smooth(method = "loess", se = TRUE, linewidth = 0.8) +
  facet_wrap(~ age_group, ncol = 3) + 
  labs(
    title = "Weekly Median Price for Center Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) + 
  scale_color_manual(values = colorRampPalette(brewer_pal(palette = "Paired")(10))(10)) +
  theme_minimal(base_size = 12) + 
  theme(
    strip.background = element_rect(
      fill = "gray",
    )
  )

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# LAB 2: Q17
# ANOVA to compare species mean in rodent dataset
aov(weight ~ species, data = surveys) |> summary()

```

-   Example 2

```{r}
#| label: dsm-2-2

# LAB 1: Q10-13
# two sample t test comparing supplement groups
t.test(len ~ supp,
      data = ToothGrowth, 
      var.equal = FALSE, 
      alternative = "two.sided")

```

-   Example 3

```{r}
#| label: dsm-2-3

# CHALLENGE 3: Q3
# chi square test to check for independence between variables
chi_square_test <- chisq.test(
  table(teacher_evals_compare$SET_level, 
  teacher_evals_compare$sen_level)
)

```

## Revising My Thinking

Throughout this course, I consistently revised my work based on comments I received from peers and feedback I received on rubrics, focusing on writing cleaner and more efficient code each week.

Early on in the quarter, my main goal was making code "work" but through feedback and reflection, I began to understand that professional R programming is also about tidiness, reproduciblity, and readability. For instance, after receiving feedback on my Lab 4 submission, I revised my plots to use fct_reorder2() so that my legend automatically aligned with color order. Although my plot accurately displayed the data, this improvement was crucial for making my visualization clearer. Moreover, through applying this revision, I learned how to write adaptable code that won't break if data changes (as fct_reorder2() is automatic). Similarly, revising my YAML settings and chunk options to remove messages/ warnings helped me see that formatting choices can directly affect how a report reads. Iterating through feedback and revisions have also taught me to replace absolute file paths with here(), to ensure my projects render smoothly across computers, reinforcing reproducibility.

Although these revisions seem to only address small issues, over the past weeks, I've noticed that each change encouraged me towards more thoughtful, modular, and sustainable coding practices that I've since applied in later labs/ challenges.

## Extending My Thinking

For the past weeks, I've learned to extend my thinking by experimenting beyond what was explicitly required in the labs/ challenges. I began exploring new palettes like viridis and colorRampPalette() to make my plots more visually pleasing. When analyzing childcare costs, I experimented with pivot_longer() and fct_relevel() to make grouped comparison easier to interpret, deepening my understanding of how data structure and visualization interacts. Furthermore, working through Lab 5's relational joins, to identify the prime suspect in the crime report, stretched my thinking; I learned how to efficiently link multiple tables logically using chained inner_join()s and saw how relational data mirrors real world applications. Additionally, I often look up documentation for functions from lubridate and stringr to find ways to reduce redundant code and optimize efficiency in my pipelines. Now, halfway through the quarter, I've learned to to make deliberate choices to write cleaner, smarter, and more insightful analyses that showcase creativity and technical precision.

## Peer Support & Collaboration

Peer Review (Lab 4):

"Hi Aidan!
Amazing work on Lab 4! Overall, your code is very organized, readable, and well structured. I like that all your variables were clearly named-- it made following through your data transformations very easy.
Here are a few suggestions that might help improve the tidiness and cleanliness of your code: \
- Although your pipelines are pretty consistent, they could be even cleaner by adding spaces around all '=' operators and every line ends with either a '\|\>' or '+' operator. Keeping this in consideration will help distinguish plot layers. \
- Another piece of advice I think you could benefit from is condensing related calculations within single function calls. I noticed that in a few of your code chunks, you used mutate() or summarise() multiple times in sequence. Condensing these steps into one call will help make your code more efficient and less redundant. \
- This is only if you want to go above and beyond, but it would be super helpful if you added brief comments or md explanations describing longer code blocks, so readers can follow along easier. \
All in all, your source code was very well written and your final rendering looks great! All lab requirements are met. With a few tweaks, your code is close to being perfect!"

One example of feedback I'm proud of was from my peer review on Aidan's Lab 4 submission. In my review, I balanced positive and suggestive feedback by complimenting his clear variable naming and organized structure and providing specific actionable advice to elevate the tidiness of his code. My suggestions were inspired by the tidyverse syntax standards and how my own understanding of clean and readable code had evolved throughout the course. Giving this feedback helped me recognize that I could clearly identify good coding practices in other people's work and articulate ways to improve efficiency. By reviewing and writing feedback, I've strengthened my own awareness as a collaborator and programmer.

Furthermore, through weekly pair programming activities, I've also grown more confident working alongside classmates. I learned to balance offering help with listening carefully to my partner's thought process so we could debug/ brainstorm together effectively. I really enjoyed having defined roles (one talking through code/ typer)-- collaborating this way showed me how valuable peer exchange is.
